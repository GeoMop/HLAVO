#python:

"""
Model of a wave propagation along a cox and through a connection to the edge of plate.

Coax core (X axis) and shileding is modeled as 3 cylinders: PEC, dielectric, PEC
Source is modeled at the 4 points of the core, mimicking the TEM wave.

Plate (XY axes) is parallel to the coax, extending up to PML boundary since in this we just want to understand
the behavior at the connection.
"""
## Sensor geometry + freespace
## transmission line + RX on other electrode; around 100MHz


## Import necessary functions from gprMax module and numpy for calculations
from gprMax.input_cmd_funcs import *
import numpy as np

## Setup domain, 
domain_size = np.array([0.2, 0.2, 0.1])  # domain size as a numpy array [X, Y, Z] in meters
domain(*domain_size)

step_size = 0.0015  # in meters
steps = np.full(3, step_size)
dx_dy_dz(*steps)

time_window_end = 50e-9  # in seconds
time_window(time_window_end)

## Geometry Parameters, RG-6/U coax 75 Ohm (attenuation 2 dB/ 100ft @ 100MHz
## core fixed, Velocity of Propagation for PE foam 80%, coax calculator is used to compute outer dielectric diameter for 75 Ohm
## https://www.pasternack.com/t-calculator-coax-cutoff.aspx
## 
core_diam = 1.024         # [mm]
dielectric_diam = 4.9     # [mm]
velocity_factor = 80      # vf = sqrt(1/eps_relative)

permitivity = 1/velocity_factor**2


## TODO: cylinders and plate geometry, 4 sources approximationg the TEM wave around coax




electrodes_thick = 0.002
electrodes_height = 0.01

outer_diameter = 0.017  # outer diemeter of electrodes
outer_gap = 0.002

## Compute center coordinates as a NumPy array
center = domain_size / 2


## Shilding cylinder
main_diameter = outer_diameter + outer_gap
cylinder(center[0], center[1], 0, center[0], center[1], domain_size[2], main_diameter, 'free_space')

## Electrodes outer cylinder
outer_z = (2 * electrodes_height + electrodes_gap) / 2
cylinder(center[0], center[1], center[2] - outer_z, center[0], center[1], center[2] + outer_z, outer_diameter, 'pec')

## Electrodes inner cylinder
inner_diameter = outer_diameter - electrodes_thick
cylinder(center[0], center[1], center[2] - outer_z, center[0], center[1], center[2] + outer_z, inner_diameter, 'free_space') 

## Electrodes gap
gap_diameter = outer_diameter + outer_gap
gap_z1 = center[2] - electrodes_gap / 2
gap_z2 = center[2] + electrodes_gap / 2
cylinder(center[0], center[1], gap_z1, center[0], center[1], gap_z2, gap_diameter, 'free_space')

## Source definition
waveform('gaussiandot', 5, 1e8, 'my_gauss')

## Calculate the mean of the inner and outer diameters
x_shift = (inner_diameter + outer_diameter) / 2

## Transmission line connected to the lower electrode
input_impedance = 50
transmission_line('z', center[0] + x_shift, center[1], gap_z1, input_impedance, 'my_gauss')

## Reciever on other electrode
## E field is only on the conductor surface so we must choose RX carefully
## bottom edge, inner surface
rx(center[0] + inner_diameter, center[1], gap_z2 - steps[2]/2)


## Geometry viewing configuration
geometry_view(0, 0, 0, *domain_size, step_size, step_size, step_size, 'geometry', 'n')

## snapshots
end_time = 30e-9
N = 30
step = end_time / N
for i in range(1, N):
    time = i * step
    snapshot(*lower_corner, *domain_size, *steps, time, f"snapshot_{i:04d}")


#end_python:
