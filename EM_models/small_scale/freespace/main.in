#python:

## Sensor geometry + freespace
## transmission line + RX on other electrode; around 100MHz


## Import necessary functions from gprMax module and numpy for calculations
from gprMax.input_cmd_funcs import *
import numpy as np

## Setup domain
domain_size = np.array([0.2, 0.2, 0.15])  # domain size as a numpy array [X, Y, Z] in meters
domain(*domain_size)

step_size = 0.0015  # in meters
steps = np.full(3, step_size)
dx_dy_dz(*steps)

time_window_end = 50e-9  # in seconds
time_window(time_window_end)

## Geometry Parameters
electrodes_gap = 0.03
electrodes_thick = 0.002
electrodes_height = 0.01

outer_diameter = 0.017  # outer diemeter of electrodes
outer_gap = 0.002

## Compute center coordinates as a NumPy array
center = domain_size / 2

## Soil box
lower_corner = np.array([0, 0, 0])
box(*lower_corner, *domain_size, 'free_space')

## Main cylinder (gap between electrodes and soil)
main_diameter = outer_diameter + outer_gap
cylinder(center[0], center[1], 0, center[0], center[1], domain_size[2], main_diameter, 'free_space')

## Electrodes outer cylinder
outer_z = (2 * electrodes_height + electrodes_gap) / 2
cylinder(center[0], center[1], center[2] - outer_z, center[0], center[1], center[2] + outer_z, outer_diameter, 'pec')

## Electrodes inner cylinder
inner_diameter = outer_diameter - electrodes_thick
cylinder(center[0], center[1], center[2] - outer_z, center[0], center[1], center[2] + outer_z, inner_diameter, 'free_space') 

## Electrodes gap
gap_diameter = outer_diameter + outer_gap
gap_z1 = center[2] - electrodes_gap / 2
gap_z2 = center[2] + electrodes_gap / 2
cylinder(center[0], center[1], gap_z1, center[0], center[1], gap_z2, gap_diameter, 'free_space')

## Source definition
waveform('gaussiandot', 5, 1e8, 'my_gauss')

## Calculate the mean of the inner and outer diameters
x_shift = (inner_diameter + outer_diameter) / 2

## Transmission line connected to the lower electrode
input_impedance = 50
transmission_line('z', center[0] + x_shift, center[1], gap_z1, input_impedance, 'my_gauss')

## Reciever on other electrode
## E field is only on the conductor surface so we must choose RX carefully
## bottom edge, inner surface
rx(center[0] + inner_diameter, center[1], gap_z2 - steps[2]/2, 'rx1', 'Ex Ey Ez Hx Hy Hz Ix Iy Iz')


## Geometry viewing configuration
geometry_view(0, 0, 0, *domain_size, step_size, step_size, step_size, 'geometry', 'n')

## snapshots
end_time = 30e-9
N = 30
step = end_time / N
for i in range(1, N):
    time = i * step
    snapshot(*lower_corner, *domain_size, *steps, time, f"snapshot_{i:04d}")


#end_python:
